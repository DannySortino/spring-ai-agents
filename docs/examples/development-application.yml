# =============================================================================
# Development Application Configuration Example
# =============================================================================
# This configuration is optimized for development with MCP integration,
# detailed logging, and testing features enabled.

spring:
  application:
    name: spring-ai-agent-platform-dev
  ai:
    openai:
      api-key: ${OPENAI_API_KEY:your-dev-api-key}
      chat:
        options:
          model: gpt-4
          temperature: 0.7
    # MCP Client Configuration for external tool integration
    mcp:
      server:
        enabled: true
        base-url: /api/agents/mcp
        sse-endpoint: /sse
        sse-message-endpoint: /message
      client:
        enabled: true
        name: devToolsClient
        type: SYNC
        sse:
          connections:
            localDataServer:
              url: http://localhost:8081
              sse-endpoint: /mcp/sse
              message-endpoint: /mcp/message
            testingServer:
              url: http://localhost:8082
              sse-endpoint: /mcp/sse
              message-endpoint: /mcp/message
        request-timeout: 30s

server:
  port: 8080

# Detailed logging for development
logging:
  level:
    org.example: DEBUG
    org.springframework.ai: DEBUG
    org.springframework.ai.mcp: TRACE
    root: INFO

# Development-focused agent configurations
app:
  agents:
    # Development testing agent with tool integration
    - name: devTestAgent
      model: openai
      system-prompt: "You are a development testing assistant with access to various tools."
      workflow:
        type: graph
        chain:
          - nodeId: "analyze_request"
            prompt: "Analyzing development request: {input}"
          - nodeId: "data_tool_call"
            dependsOn: ["analyze_request"]
            tool: "dataTool"
          - nodeId: "process_results"
            dependsOn: ["data_tool_call"]
            prompt: "Processing tool results and providing development insights"
      mcp-server:
        enabled: true
        port: 8083
        description: "Development testing agent MCP server"
        base-url: "/api/agents/devTestAgent/mcp"

    # Parallel processing agent for testing concurrent workflows
    - name: parallelTestAgent
      model: openai
      system-prompt: "You are a parallel processing test agent."
      workflow:
        type: graph
        chain:
          # Parallel tasks (no dependencies between them)
          - nodeId: "validation_task"
            prompt: "Validate input data: {input}"
          - nodeId: "processing_task"
            prompt: "Process the data: {input}"
          - nodeId: "analysis_task"
            prompt: "Analyze results for: {input}"
          # Aggregator depends on all parallel tasks
          - nodeId: "aggregator"
            dependsOn: ["validation_task", "processing_task", "analysis_task"]
            prompt: "Development test results: validation: {validation_task}, processing: {processing_task}, analysis: {analysis_task}"

    # Orchestrator agent for testing complex workflows
    - name: orchestratorTestAgent
      model: openai
      system-prompt: "You are an orchestrator test agent for development."
      workflow:
        type: graph
        chain:
          # Manager node
          - nodeId: "manager"
            prompt: |
              Development workflow management for: {input}
              Coordinate testing workers efficiently.
          # Worker nodes (depend on manager)
          - nodeId: "unit_test_worker"
            dependsOn: ["manager"]
            prompt: "Unit Test Worker - Manager decision: {manager} - Perform unit testing analysis: {input}"
          - nodeId: "integration_test_worker"
            dependsOn: ["manager"]
            prompt: "Integration Test Worker - Manager decision: {manager} - Perform integration testing analysis: {input}"
          - nodeId: "performance_test_worker"
            dependsOn: ["manager"]
            prompt: "Performance Test Worker - Manager decision: {manager} - Perform performance testing analysis: {input}"
          # Synthesizer node (depends on all workers)
          - nodeId: "synthesizer"
            dependsOn: ["unit_test_worker", "integration_test_worker", "performance_test_worker"]
            prompt: |
              Development Test Summary
              Manager Decision: {manager}
              Worker Results: Unit Test: {unit_test_worker}, Integration Test: {integration_test_worker}, Performance Test: {performance_test_worker}
              
              Provide comprehensive development testing report.

    # Advanced routing agent with multiple tools
    - name: advancedRoutingAgent
      model: openai
      system-prompt: "You are an advanced routing agent with comprehensive tool access."
      workflow:
        type: graph
        chain:
          - nodeId: "advanced_router"
            conditional:
              condition:
                type: CONTAINS
                field: "input"
                value: "data"
                ignoreCase: true
              thenStep:
                prompt: "Handle data request: {input}"
                tool: dataTool
              elseStep:
                conditional:
                  condition:
                    type: CONTAINS
                    field: "input"
                    value: "analytics"
                    ignoreCase: true
                  thenStep:
                    prompt: "Perform analytics on: {input}"
                    tool: analyticsTool
                  elseStep:
                    conditional:
                      condition:
                        type: CONTAINS
                        field: "input"
                        value: "testing"
                        ignoreCase: true
                      thenStep:
                        prompt: "Execute testing for: {input}"
                        tool: testingTool
                      elseStep:
                        conditional:
                          condition:
                            type: CONTAINS
                            field: "input"
                            value: "debug"
                            ignoreCase: true
                          thenStep:
                            prompt: "Debug the issue: {input}"
                            tool: debugTool
                          elseStep:
                            prompt: "General development assistance for: {input}"
      mcp-server:
        enabled: true
        port: 8084
        description: "Advanced routing agent with debugging capabilities"
        base-url: "/api/agents/advancedRoutingAgent/mcp"
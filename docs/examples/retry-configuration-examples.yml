# =============================================================================
# Retry Configuration Examples
# =============================================================================
# This file demonstrates various retry configuration patterns and strategies
# for different use cases and scenarios in the Spring AI Agent Platform.

spring:
  application:
    name: retry-examples
  ai:
    openai:
      api-key: ${OPENAI_API_KEY:your-api-key}

# =============================================================================
# Example 1: Basic Retry Configuration
# =============================================================================
# Simple retry setup with default exponential backoff
app:
  # Application-wide default retry configuration
  defaultRetry:
    strategy: EXPONENTIAL
    maxAttempts: 3
    initialDelay: 1000
    maxDelay: 10000
    multiplier: 2.0
    enabled: true

  agents:
    # Basic agent with default retry behavior
    - name: basicRetryAgent
      model: openai
      system-prompt: "You are a basic agent with retry capabilities."
      workflow:
        type: graph
        chain:
          - nodeId: "process_request"
            prompt: "Process request: {input}"
          - nodeId: "external_api_call"
            dependsOn: ["process_request"]
            tool: "externalAPI"  # This will use default retry
          - nodeId: "provide_response"
            dependsOn: ["external_api_call"]
            prompt: "Provide response based on results"

# =============================================================================
# Example 2: Agent-Level Retry Override
# =============================================================================
    # Agent with custom retry configuration
    - name: customRetryAgent
      model: openai
      system-prompt: "You are an agent with custom retry settings."
      # Agent-level retry override
      retry:
        strategy: EXPONENTIAL_JITTER
        maxAttempts: 5
        initialDelay: 500
        maxDelay: 30000
        multiplier: 2.0
        jitterFactor: 0.1
        retryableExceptions:
          - "RuntimeException"
          - "IOException"
          - "TimeoutException"
        nonRetryableExceptions:
          - "IllegalArgumentException"
          - "SecurityException"
      workflow:
        type: graph
        chain:
          - nodeId: "analyze_request"
            prompt: "Analyze request: {input}"
          - nodeId: "unreliable_service_call"
            dependsOn: ["analyze_request"]
            tool: "unreliableService"  # Uses agent-level retry
          - nodeId: "generate_response"
            dependsOn: ["unreliable_service_call"]
            prompt: "Generate response from analysis"

# =============================================================================
# Example 3: Step-Level Retry Configuration
# =============================================================================
    # Agent with different retry strategies for different steps
    - name: stepLevelRetryAgent
      model: openai
      system-prompt: "You are an agent with step-specific retry configurations."
      workflow:
        type: graph
        chain:
          # Critical step with aggressive retry
          - nodeId: "initial_validation"
            prompt: "Initial validation: {input}"
            retry:
              strategy: EXPONENTIAL
              maxAttempts: 7
              initialDelay: 200
              maxDelay: 15000
              multiplier: 1.5
          
          # External API call with jitter to prevent thundering herd
          - nodeId: "external_api_call"
            dependsOn: ["initial_validation"]
            tool: "externalAPI"
            retry:
              strategy: EXPONENTIAL_JITTER
              maxAttempts: 5
              initialDelay: 1000
              jitterFactor: 0.2
              retryableExceptions:
                - "ConnectException"
                - "SocketTimeoutException"
                - "HttpRetryException"
          
          # Final processing with linear backoff
          - nodeId: "final_processing"
            dependsOn: ["external_api_call"]
            prompt: "Final processing: {input}"
            retry:
              strategy: LINEAR
              maxAttempts: 3
              initialDelay: 1000
              increment: 500

# =============================================================================
# Example 4: Route-Level Retry Configuration
# =============================================================================
    # Routing agent with different retry strategies per route
    - name: routeRetryAgent
      model: openai
      system-prompt: "You are a routing agent with route-specific retry configurations."
      workflow:
        type: graph
        chain:
          - nodeId: "route_router"
            conditional:
              condition:
                type: CONTAINS
                field: "input"
                value: "billing"
                ignoreCase: true
              thenStep:
                prompt: "Handle billing request: {input}"
                tool: "billingService"
                retry:
                  strategy: EXPONENTIAL_JITTER
                  maxAttempts: 7
                  initialDelay: 500
                  maxDelay: 60000
                  jitterFactor: 0.15
                  retryableExceptions:
                    - "PaymentException"
                    - "BillingServiceException"
                  nonRetryableExceptions:
                    - "InvalidAccountException"
                    - "InsufficientFundsException"
              elseStep:
                conditional:
                  condition:
                    type: CONTAINS
                    field: "input"
                    value: "support"
                    ignoreCase: true
                  thenStep:
                    prompt: "Handle support request: {input}"
                    tool: "supportService"
                    retry:
                      strategy: EXPONENTIAL
                      maxAttempts: 3
                      initialDelay: 1000
                      maxDelay: 10000
                  elseStep:
                    conditional:
                      condition:
                        type: CONTAINS
                        field: "input"
                        value: "analytics"
                        ignoreCase: true
                      thenStep:
                        prompt: "Generate analytics: {input}"
                        tool: "analyticsService"
                        retry:
                          strategy: NONE
                          maxAttempts: 1
                      elseStep:
                        prompt: "General assistance for: {input}"

# =============================================================================
# Example 5: Production-Ready Retry Configuration
# =============================================================================
    # Enterprise agent with comprehensive retry setup
    - name: enterpriseAgent
      model: openai
      system-prompt: "You are an enterprise-grade agent with robust retry capabilities."
      # Production-level retry configuration
      retry:
        strategy: EXPONENTIAL_JITTER
        maxAttempts: 5
        initialDelay: 1000
        maxDelay: 30000
        multiplier: 2.0
        jitterFactor: 0.1
        enabled: true
        # Comprehensive exception handling
        retryableExceptions:
          - "RuntimeException"
          - "IOException"
          - "ConnectException"
          - "SocketTimeoutException"
          - "HttpRetryException"
          - "ServiceUnavailableException"
          - "TooManyRequestsException"
        nonRetryableExceptions:
          - "IllegalArgumentException"
          - "SecurityException"
          - "AuthenticationException"
          - "AuthorizationException"
          - "ValidationException"
          - "BadRequestException"
      workflow:
        type: graph
        chain:
          # Manager node
          - nodeId: "manager"
            prompt: "Coordinate enterprise workflow for: {input}"
          # Worker nodes (depend on manager)
          - nodeId: "validation_worker"
            dependsOn: ["manager"]
            prompt: "Validation Worker - Manager decision: {manager} - Validate enterprise request: {input}"
            retry:
              strategy: FIXED_DELAY
              maxAttempts: 2
              initialDelay: 500
          - nodeId: "processing_worker"
            dependsOn: ["manager"]
            tool: "enterpriseService"
            retry:
              strategy: EXPONENTIAL_JITTER
              maxAttempts: 7
              initialDelay: 1000
              jitterFactor: 0.2
          # Synthesizer node (depends on all workers)
          - nodeId: "synthesizer"
            dependsOn: ["validation_worker", "processing_worker"]
            prompt: "Enterprise result: {manager} | Validation: {validation_worker}, Processing: {processing_worker}"

# =============================================================================
# Example 6: Different Retry Strategies Showcase
# =============================================================================
    # Agent demonstrating all retry strategies
    - name: strategyShowcaseAgent
      model: openai
      system-prompt: "You demonstrate different retry strategies."
      workflow:
        type: graph
        chain:
          # Parallel tasks (no dependencies between them)
          - nodeId: "no_retry_task"
            prompt: "Fast fail operation: {input}"
            retry:
              strategy: NONE
              maxAttempts: 1
          
          - nodeId: "fixed_delay_task"
            prompt: "Fixed delay operation: {input}"
            retry:
              strategy: FIXED_DELAY
              maxAttempts: 3
              initialDelay: 2000
          
          - nodeId: "linear_task"
            prompt: "Linear backoff operation: {input}"
            retry:
              strategy: LINEAR
              maxAttempts: 4
              initialDelay: 1000
              increment: 1000
          
          - nodeId: "exponential_task"
            prompt: "Exponential backoff operation: {input}"
            retry:
              strategy: EXPONENTIAL
              maxAttempts: 5
              initialDelay: 500
              maxDelay: 16000
              multiplier: 2.0
          
          - nodeId: "jitter_task"
            prompt: "Jitter backoff operation: {input}"
            retry:
              strategy: EXPONENTIAL_JITTER
              maxAttempts: 5
              initialDelay: 1000
              maxDelay: 30000
              multiplier: 2.0
              jitterFactor: 0.25
          
          - nodeId: "custom_task"
            prompt: "Custom strategy operation: {input}"
            retry:
              strategy: CUSTOM
              maxAttempts: 3
              customProperties:
                algorithm: "business-specific"
                backoffType: "adaptive"
                contextAware: true
          
          # Aggregator depends on all parallel tasks
          - nodeId: "aggregator"
            dependsOn: ["no_retry_task", "fixed_delay_task", "linear_task", "exponential_task", "jitter_task", "custom_task"]
            prompt: "Strategy showcase results: No Retry: {no_retry_task}, Fixed Delay: {fixed_delay_task}, Linear: {linear_task}, Exponential: {exponential_task}, Jitter: {jitter_task}, Custom: {custom_task}"

# =============================================================================
# Example 7: High-Availability Configuration
# =============================================================================
    # Agent optimized for high availability scenarios
    - name: highAvailabilityAgent
      model: openai
      system-prompt: "You are a high-availability agent with maximum resilience."
      # Aggressive retry for maximum uptime
      retry:
        strategy: EXPONENTIAL_JITTER
        maxAttempts: 10
        initialDelay: 100
        maxDelay: 60000
        multiplier: 1.5
        jitterFactor: 0.3
        enabled: true
        retryableExceptions:
          - "RuntimeException"
          - "IOException"
          - "ConnectException"
          - "SocketTimeoutException"
          - "ServiceUnavailableException"
      workflow:
        type: graph
        chain:
          - nodeId: "high_availability_processing"
            prompt: "High-availability processing: {input}"
            retry:
              strategy: EXPONENTIAL_JITTER
              maxAttempts: 15
              initialDelay: 50
              jitterFactor: 0.4
          - nodeId: "primary_service_call"
            dependsOn: ["high_availability_processing"]
            tool: "primaryService"
            retry:
              strategy: EXPONENTIAL_JITTER
              maxAttempts: 12
              initialDelay: 200
              jitterFactor: 0.2
          - nodeId: "backup_service_call"
            dependsOn: ["primary_service_call"]
            tool: "backupService"
            retry:
              strategy: EXPONENTIAL
              maxAttempts: 8
              initialDelay: 500

# =============================================================================
# Example 8: Development/Testing Configuration
# =============================================================================
    # Agent with retry settings optimized for development
    - name: developmentAgent
      model: openai
      system-prompt: "You are a development agent with fast-fail retry for quick feedback."
      # Development-friendly retry (fast feedback)
      retry:
        strategy: FIXED_DELAY
        maxAttempts: 2
        initialDelay: 100
        enabled: true
      workflow:
        type: graph
        chain:
          - nodeId: "development_test"
            prompt: "Development test: {input}"
            retry:
              strategy: FIXED_DELAY
              maxAttempts: 1
              initialDelay: 50
          - nodeId: "mock_service_call"
            dependsOn: ["development_test"]
            tool: "mockService"
            retry:
              strategy: NONE
              maxAttempts: 1
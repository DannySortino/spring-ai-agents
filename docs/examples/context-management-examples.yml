# Context Management Examples
# This file demonstrates various context management configurations for GraphWorkflow steps

# Example 1: Default behavior - Keep all context (no context management configuration)
agents:
  - name: "default-context-agent"
    systemPrompt: "You are a helpful assistant that maintains context throughout the conversation."
    workflow:
      type: graph
      chain:
        - nodeId: "analyze"
          prompt: "Step 1: Analyze the input: {input}"
        - nodeId: "recommend"
          dependsOn: ["analyze"]
          prompt: "Step 2: Based on previous analysis ({analyze}), provide recommendations"
        # No contextManagement specified = keep all context (default)

---

# Example 2: Clear context before specific steps
agents:
  - name: "clear-before-agent"
    systemPrompt: "You are an assistant that clears sensitive data before certain operations."
    workflow:
      type: graph
      chain:
        - nodeId: "collect_info"
          prompt: "Step 1: Collect user information: {input}"
        - nodeId: "secure_process"
          dependsOn: ["collect_info"]
          prompt: "Step 2: Process data securely"
          contextManagement:
            clearBefore: true
            preserveKeys:
              - "systemPrompt"
              - "agentName"
              - "isFirstInvocation"
        - nodeId: "final_response"
          dependsOn: ["secure_process"]
          prompt: "Step 3: Provide final response"

---

# Example 3: Clear context after specific steps
agents:
  - name: "clear-after-agent"
    systemPrompt: "You are an assistant that cleans up temporary data after processing."
    workflow:
      type: graph
      chain:
        - nodeId: "temp_analysis"
          prompt: "Step 1: Generate temporary analysis: {input}"
          contextManagement:
            clearAfter: true
            preserveKeys:
              - "systemPrompt"
              - "agentName"
              - "userId"
        - nodeId: "final_report"
          dependsOn: ["temp_analysis"]
          prompt: "Step 2: Create final report based on clean context"

---

# Example 4: Remove specific keys only
agents:
  - name: "selective-removal-agent"
    systemPrompt: "You are an assistant that removes only specific sensitive information."
    workflow:
      type: graph
      chain:
        - nodeId: "process_request"
          prompt: "Step 1: Process user request with credentials: {input}"
        - nodeId: "secure_operation"
          dependsOn: ["process_request"]
          prompt: "Step 2: Perform secure operation"
          contextManagement:
            removeKeys:
              - "password"
              - "apiKey"
              - "temporaryToken"
        - nodeId: "return_results"
          dependsOn: ["secure_operation"]
          prompt: "Step 3: Return results without sensitive data"

---

# Example 5: Mixed context management in complex workflow
agents:
  - name: "complex-context-agent"
    systemPrompt: "You are an assistant with sophisticated context management."
    workflow:
      type: graph
      chain:
        - nodeId: "data_collection"
          prompt: "Step 1: Initial data collection: {input}"
        - nodeId: "sensitive_processing"
          dependsOn: ["data_collection"]
          prompt: "Step 2: Sensitive processing"
          contextManagement:
            clearBefore: true
            preserveKeys:
              - "systemPrompt"
              - "agentName"
              - "userId"
              - "sessionId"
        - nodeId: "api_call"
          dependsOn: ["sensitive_processing"]
          tool: "external-api-call"
          contextManagement:
            clearAfter: true
            preserveKeys:
              - "systemPrompt"
              - "agentName"
              - "finalResult"
        - nodeId: "final_response"
          dependsOn: ["api_call"]
          prompt: "Step 4: Generate final response: {finalResult}"

---

# Example 6: Tool-based workflow with context management
agents:
  - name: "tool-context-agent"
    systemPrompt: "You are an assistant that manages context around tool calls."
    workflow:
      type: graph
      chain:
        - nodeId: "prepare_data"
          prompt: "Step 1: Prepare data for tool: {input}"
        - nodeId: "process_data"
          dependsOn: ["prepare_data"]
          tool: "data-processor"
          contextManagement:
            clearBefore: true
            preserveKeys:
              - "systemPrompt"
              - "agentName"
        - nodeId: "format_results"
          dependsOn: ["process_data"]
          tool: "result-formatter"
          contextManagement:
            clearAfter: true
            preserveKeys:
              - "systemPrompt"
              - "agentName"
              - "formattedResult"
        - nodeId: "present_results"
          dependsOn: ["format_results"]
          prompt: "Step 4: Present final results: {formattedResult}"

---

# Example 7: Complete context clearing (security-focused)
agents:
  - name: "secure-agent"
    systemPrompt: "You are a security-focused assistant that clears all context for sensitive operations."
    workflow:
      type: graph
      chain:
        - nodeId: "collect_info"
          prompt: "Step 1: Collect sensitive information: {input}"
        - nodeId: "isolated_processing"
          dependsOn: ["collect_info"]
          prompt: "Step 2: Process in isolated context"
          contextManagement:
            clearBefore: true
            # No preserveKeys = clear everything
        - nodeId: "sanitized_response"
          dependsOn: ["isolated_processing"]
          prompt: "Step 3: Provide sanitized response"

---

# Example 8: Parallel workflow with context management (converted to GraphWorkflow)
agents:
  - name: "parallel-context-agent"
    systemPrompt: "You are an assistant using parallel processing with context control."
    workflow:
      type: graph
      chain:
        # Parallel analysis and validation tasks
        - nodeId: "analyze_data"
          prompt: "Analyze data: {input}"
        - nodeId: "validate_data"
          prompt: "Validate data: {input}"
        
        # Context cleanup for analysis
        - nodeId: "cleanup_analysis"
          dependsOn: ["analyze_data"]
          prompt: "Clean up analysis context"
          contextManagement:
            clearAfter: true
            preserveKeys:
              - "analysisResult"
        
        # Context cleanup for validation
        - nodeId: "cleanup_validation"
          dependsOn: ["validate_data"]
          prompt: "Clear validation context"
          contextManagement:
            removeKeys:
              - "temporaryValidationData"
              - "intermediateResults"
        
        # Aggregator that depends on both cleanup steps
        - nodeId: "combine_results"
          dependsOn: ["cleanup_analysis", "cleanup_validation"]
          prompt: "Combine analysis and validation results: {cleanup_analysis} and {cleanup_validation}"

---

# Example 9: Orchestrator workflow with context management (converted to GraphWorkflow)
agents:
  - name: "orchestrator-context-agent"
    systemPrompt: "You are a manager coordinating workers with context control."
    workflow:
      type: graph
      chain:
        # Manager node - analyzes and delegates
        - nodeId: "manager"
          prompt: "Analyze the request and delegate to appropriate workers: {input}"
        
        # Data worker - processes data with context cleanup
        - nodeId: "data_worker_process"
          dependsOn: ["manager"]
          prompt: "Data Worker - Manager decision: {manager} - Process data: {input}"
        - nodeId: "data_worker_cleanup"
          dependsOn: ["data_worker_process"]
          prompt: "Clean sensitive data"
          contextManagement:
            removeKeys:
              - "rawData"
              - "personalInfo"
        
        # Analysis worker - performs analysis with context cleanup
        - nodeId: "analysis_worker_process"
          dependsOn: ["manager"]
          prompt: "Analysis Worker - Manager decision: {manager} - Perform analysis: {input}"
        - nodeId: "analysis_worker_cleanup"
          dependsOn: ["analysis_worker_process"]
          prompt: "Clear analysis cache"
          contextManagement:
            clearAfter: true
            preserveKeys:
              - "finalAnalysis"
        
        # Synthesizer - combines worker results
        - nodeId: "synthesizer"
          dependsOn: ["data_worker_cleanup", "analysis_worker_cleanup"]
          prompt: "Synthesize results from data worker: {data_worker_cleanup} and analysis worker: {analysis_worker_cleanup}"

---

# Example 10: Routing workflow with context management (converted to GraphWorkflow)
agents:
  - name: "routing-context-agent"
    systemPrompt: "You are a router that manages context based on request type."
    workflow:
      type: graph
      chain:
        - nodeId: "context_router"
          conditional:
            condition:
              type: CONTAINS
              field: "input"
              value: "sensitive"
              ignoreCase: true
            thenStep:
              prompt: "Handle sensitive request with context clearing"
              contextManagement:
                clearAfter: true
                preserveKeys:
                  - "systemPrompt"
                  - "agentName"
            elseStep:
              conditional:
                condition:
                  type: CONTAINS
                  field: "input"
                  value: "tool"
                  ignoreCase: true
                thenStep:
                  tool: "external-processor"
                elseStep:
                  prompt: "Handle public request: {input}"